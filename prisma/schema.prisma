
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  firstName         String?
  lastName          String?
  phone             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Supabase Auth will handle authentication, this is just for additional user data
  authId            String    @unique // Supabase auth user ID 
  // Payment Information
  paymentMethods    PaymentMethod[]
  bookings          Booking[]
  
  @@map("users")
}

model PaymentMethod {
  id                String    @id @default(uuid())
  userId            String
  cardHolderName    String
  cardType          String    
  lastFourDigits    String
  expiryMonth       Int
  expiryYear        Int
  isDefault         Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payment_methods")
}

model Airport {
  id                String    @id @default(uuid())
  code              String    @unique 
  name              String
  city              String
  country           String
  latitude          Float?
  longitude         Float?
  
  departureFlights  Flight[]  @relation("DepartureAirport")
  arrivalFlights    Flight[]  @relation("ArrivalAirport")
  
  @@map("airports")
}

model Airline {
  id                String    @id @default(uuid())
  code              String    @unique 
  name              String
  flights           Flight[]
  
  @@map("airlines")
}

model Flight {
  id                String    @id @default(uuid())
  flightNumber      String
  airlineId         String
  departureAirportId String
  arrivalAirportId  String
  departureTime     DateTime
  arrivalTime       DateTime
  
  // Capacity and availability
  economyCapacity   Int
  premiumEconomyCapacity Int?
  businessCapacity  Int?
  firstClassCapacity Int?
  
  economyPrice      Float
  premiumEconomyPrice Float?
  businessPrice     Float?
  firstClassPrice   Float?
  
  status            FlightStatus @default(SCHEDULED)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  airline           Airline   @relation(fields: [airlineId], references: [id])
  departureAirport  Airport   @relation("DepartureAirport", fields: [departureAirportId], references: [id])
  arrivalAirport    Airport   @relation("ArrivalAirport", fields: [arrivalAirportId], references: [id])
  flightSegments    FlightSegment[]
  
  @@map("flights")
}

enum FlightStatus {
  SCHEDULED
  DELAYED
  DEPARTED
  IN_AIR
  LANDED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum CabinClass {
  ECONOMY
  PREMIUM_ECONOMY
  BUSINESS
  FIRST
}

enum PassengerType {
  ADULT
  CHILD
  INFANT
}

model Booking {
  id                String    @id @default(uuid())
  userId            String
  totalAmount       Float
  status            BookingStatus @default(PENDING)
  bookingDate       DateTime  @default(now())
  paymentStatus     String    // PAID, PENDING, FAILED
  ticketUrl         String?  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  user              User      @relation(fields: [userId], references: [authId])
  passengers        Passenger[]
  flightSegments    FlightSegment[]
  
  @@map("bookings")
}

model Passenger {
  id                String    @id @default(uuid())
  bookingId         String
  firstName         String
  lastName          String
  dateOfBirth       DateTime?
  nationality       String?
  passportNumber    String?
  passportExpiry    DateTime?
  passengerType     PassengerType @default(ADULT)
  
  // Relations
  booking           Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  
  @@map("passengers")
}

model FlightSegment {
  id                String    @id @default(uuid())
  bookingId         String
  flightId          String
  cabinClass        CabinClass
  fareAmount        Float
  
  // For round-trip identification
  isReturn          Boolean   @default(false)
  
  // Relations
  booking           Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  flight            Flight    @relation(fields: [flightId], references: [id])
  
  @@map("flight_segments")
}